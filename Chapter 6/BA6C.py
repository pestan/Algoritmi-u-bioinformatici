# -*- coding: utf-8 -*-
"""BA6C.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FFsy0j1HHH_RGUngwa1CXqs3wVGW3vzR
"""

def blocks(p):
    
    elementNmbr = sum([len(chromosome) for chromosome in p])

    return elementNmbr

def ChromosomeToCycle(Chromosome):
    
    Nodes=[]
    for j in range(0,len(Chromosome)):
        i=Chromosome[j]
        if i > 0:
            Nodes.append(2*i-1)
            Nodes.append(2*i)
        else:
            Nodes.append(-2*i) #minus because i is negative
            Nodes.append(-2*i-1)

    return Nodes

def ColoredEdges(P):
    
    Edges = []
    for Chromosome in P:
        Nodes = ChromosomeToCycle(Chromosome)
        for j in range(len(Chromosome)):
            Edges.append((Nodes[(2 * j + 1) % len(Nodes)],
                          Nodes[(2 * j + 2) % len(Nodes)])) # % is for the edge connecting first and last node
    return Edges

def cycles(p,q):

    # combining colored edges from both p and q
    colored_p = ColoredEdges(p)
    colored_q = ColoredEdges(q)
    colored_edges = colored_p + colored_q
    
    nmbr_of_cycles = 0

    # finding cycles of colored edges    
    while len(colored_edges) > 0:
        first = colored_edges[0][0]
        second = colored_edges[0][1]
        colored_edges.remove(colored_edges[0])

        # moving one node at a time until reaching the beginning of the cycle
        while second != first:
            for edge in colored_edges:
                if edge[0] == second:
                    second = edge[1]
                    colored_edges.remove(edge)
                    break
                if edge[1] == second:
                    second = edge[0]
                    colored_edges.remove(edge)
                    break
                
        nmbr_of_cycles += 1
        
    return nmbr_of_cycles

def TwoBreakDistance(P,Q):

    return blocks(P) - cycles(P,Q)
    

with open("rosalind_ba6c.txt") as file:
    lines = file.readlines()
    
for i in range (0,len(lines)):
    lines[i] = lines[i][1:-2] # excluding '(', ')' and '\n'
    lines[i] = lines[i].split(')(')

    for j in range(0,len(lines[i])):
        lines[i][j] = lines[i][j].split(' ')
        lines[i][j] = [int(x) for x in lines[i][j]]

P = lines[0]
Q = lines[1]

print(TwoBreakDistance(P,Q))