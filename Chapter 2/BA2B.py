# -*- coding: utf-8 -*-
"""BA2B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fIu7K79912pG4cPxH_p2XPwo19yyE5sr
"""

def kmer(text,k):
  kmers=[]
  for i in range(0,len(text)-k+1):
    kmers.append(text[i:i+k])
  return kmers

def HammingDistance(p,q):
    n = len(p)
    c = 0
    for i in range(0,n):
        if p[i] != q[i]:
            c += 1
    return c

def minHamDist(pattern,text):
  min=len(pattern)
  kmers=kmer(text,len(pattern))
  for kme in kmers:
    if (HammingDistance(kme,pattern)<min):
      min=HammingDistance(kme,pattern)
  return min

def MSP(k,dna):
  trazeni_kmer=""
  svi_kmers=[]
  for line in dna:
    kmers_line=kmer(line,k)
    for km in kmers_line:
      if(km not in svi_kmers):
        svi_kmers.append(km)
  sum=set()
  for i in range(0,len(svi_kmers)):
    s=0
    for line in dna:
      s+=minHamDist(svi_kmers[i],line)
    if(i==0):
      sum.add(s)
      trazeni_kmer=svi_kmers[i]
    else:
      if(s<min(sum)):
        sum.clear()
        sum.add(s)
        trazeni_kmer=svi_kmers[i]
  return trazeni_kmer

input="""6
GTAAGGACACATCGTGTAAATCCCAAAGAGCCTATCGCAGCC
AGGCCCAAAAACCGTATACCTAGCTCGCATAGGTCAGATGTT
CCTAACTCGTATTTTCCGGGCGAGTTAAACATCCAGTACGAT
TCCAGCTGGTCTCCTATCTATTCGAATATCGTTTGAACTGAT
CACTGTGGATGGAAAGGACTAAAAAATTCTCCTATCAATAAC
TGAGAGCCTAGCTTCTCATCGCAACTATACAACTGAATAGAA
GTGCATTTCGCAGGCGCTCTACGGCTAACTCCTACCAAGAAA
GGGAGTGCCACTCAGACGCCTCCACCTATCAGGCGAATAGCC
CCTAACCATTCCCAAAATCGTCTTCCCAATTAAGAGTGATCT
ATTTATAGTGAAATCGATAACCTCCTAGATCCTATCACTGTC
"""
lines=input.splitlines()
k=int(lines[0])
dna=[]
for i in range(1,len(lines)):
  dna.append(lines[i])
MSP(k,dna)