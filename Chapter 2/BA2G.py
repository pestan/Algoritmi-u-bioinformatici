# -*- coding: utf-8 -*-
"""BA2G.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fIu7K79912pG4cPxH_p2XPwo19yyE5sr
"""

def Row(char):
    if char == 'A':
        return 0
    if char == 'C':
        return 1
    if char == 'G':
        return 2
    if char == 'T':
        return 3

def Probability(kmer, Profile):
    prob = 1
    for i in range(0,len(kmer)):
        char = kmer[i]
        row = Row(char)
        prob *= Profile[row][i]
    return prob

def MaxNmbrOfOccurencesOfLetterInColumn(Motifs,j):
    countACGT = [0,0,0,0]
    for i in range(0,len(Motifs)):
        if(Motifs[i][j] == 'A'):
            countACGT[0] +=1
        elif(Motifs[i][j] == 'C'):
            countACGT[1] +=1
        elif(Motifs[i][j] == 'G'):
            countACGT[2] +=1
        elif(Motifs[i][j] == 'T'):
            countACGT[3] +=1
    return max(countACGT)

def Score(Motifs):
    score = 0;
    for i in range(0,len(Motifs[0])):
        score += (len(Motifs) - MaxNmbrOfOccurencesOfLetterInColumn(Motifs,i))
    return score

def FormProfileWithPseudocounts(strings):
    n = len(strings)
    k = len(strings[0])
    Profile = []
    for m in range (0,4):
        ProfileRow = [1]*k
        for i in range(0,k):
            for j in range(0,n):
                row = Row(strings[j][i])
                if m == row:
                    ProfileRow[i] += 1                    
            ProfileRow[i] = ProfileRow[i]/(n + 4)
        Profile.append(ProfileRow)
    return Profile

import random
from random import randint
def Random(N):
    return randint(0,N)

def ProfileRandom(sequence, k, Profile):
    kMersList = []
    probabilities = []
    for i in range(0,len(sequence) - k + 1):
        kMersList.append(sequence[i:i+k])
        probabilities.append(Probability(sequence[i:i+k],Profile))
    return random.choices(kMersList, weights = probabilities)[0]

def GibbsSampler(Dna,k,t,N):
    n = len(Dna[0])
    Motifs = []
    BestMotifs = []
    for i in range(0,t):
        position = Random(n-k)
        Motifs.append(Dna[i][position: position+k])
    BestMotifs = Motifs
    for j in range(0,N):
        i = Random(t-1)
        del Motifs[i]
        Profile = FormProfileWithPseudocounts(Motifs)
        Motifs.insert(i, ProfileRandom(Dna[i], k, Profile))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs

input="""15 20 2000
AAGTAATAGCGACGACTGAGTGGAATAGCCAGCAGGAGGCCGTCTCTAACGCGAGAGGGAATCCTGTTGAAGCATGTCCCCTTCTGCCTACCATTTAGCTATTACCAGACGGATTGGCTTGGACTGTTCTGAGAATCACCGGTACAGGGCAGATCCGATAGTTTCGTGATAGGAGATGACGATCACTATAAGTCCAATGTAATCGACTAATGTATAATCCCAGATTGGGTTACTCCCGTAACAAGACTTCCAGAGCTGGATGGGGCTGCTGAATCTAGCGAGACACAAGAGCTGTCAGCAATCCGTAAGTAATAGCGACGA
CTGAGTGGAATAGCCAGCAGGAGGCCGAAAGTGGTAGTACATTCTCTAACGCGAGAGGGAATCCTGTTGAAGCATGTCCCCTTCTGCCTACCATTTAGCTATTACCAGACGGATTGGCTTGGACTGTTCTGAGAATCACCGGTACAGGGCAGATCCGATAGTTTCGTGATAGGAGATGACGATCACTATAAGTCCAATGTAATCGACTAATGTATAATCCCAGATTGGGTTACTCCCGTAACAAGACTTCCAGAGCTGGATGGGGCTGCTGAATCTAGCGAGACACAAGAGCTGTCAGCAATCCGTAAGTAATAGCGACGA
ATTTCCAACATTTTACCATAAACCACAATCTTCGACGCTCACTTAGCCGGCCAGTTCTTTCTACAAAAGCTGCCTCTTCCCTTCAGGGCCCGAAGGGCGCTGTCAAACATTAAGTACATTGGCTGCATAGCACGTGGCTCCCGACGCCAGCTAACTTTCACTTGGCTCCAATTCATCGGCCCATGCAATCATCTCAACGACACCACGCTGTGGCGCGCGTTTGGGGCCGTGTATCCAACTATGTAGGTTGGCCCCGGGTTGGTTGCCGCCTCGACTAACTATGGTATTTACATAAGACAGCGCCCGCAATCGGCCCACTAT
CGCACCAGATCACTGACTTCTTAATAGCTGTCTTCGACGGTGCACCGTTTATTCTTCTAAAGTTCAAGGGCAATCAGTGATTTAAACACGTAGTCTCTCGTAGCCCTATATTAGCGGTTTTATAGATGCGAGTCTGGGAGGTATACAAATATGTTAACTTACCTAAATCCTTGACGCTAGTTCAGCACCACCCCATATCGCATATATACCAACTGCACGCTACCCTCGCTGCTCCGAAGCGACACCGTTAAACGCAACATGCACGAGACTGAGGTGCCTGGACTCGCGATGGTTTGTAGGATCTGTAGGACAGTCGAGGAG
TAACCATCACGAGCTAAGATCCCCCACTATACAAAACTAACCAATATTGGCGTCCAATATAAAGCGAGATGAACGTTCAGGATTACGCCGTTAAACCGAGCGTCGCTTTCGTCCTAGCAGTACCCGTGTTCAATAACATTGTCTGCTTTTGGCGGGTGCACCGTAAAAAATGGTAGTACATGATGATCTGAGATGTATGACTTATACTGCAGCACTTCAAACCCCGTATTTGAATAACGTACAATTCCCTCGAAGCCCCTGCTTGCTGAGAGAAGTCACTCCCGGCTCGGTCAAATTTCAGATAGAGCTTAGGTCATAGGT
CGATCACGTAATTATTCGCCATGAATACCGCCACCGAATACCGTTGTGTTTTATGTTCCAGTTCAACGTCGTAGGAGTGTATCACCTCCTTAGTGTTCTTAAACCCGGTCCCTAAAAGCACTACCAATTCTCTCTCATGTGAGTTCGAACTTAGAATGACTAAGGTGTTATTTCATGCTTCTTCTGAGAATCAGAGGACGGACCAAACCCGCGCGAGGGAAACACGATCTACATACCTATAAGGAATCGCTCCGCTGAGGCCCCATGAAAAACGCATGAAGAATTACGGTGTGTATAGTTGATTGTCCTGATATCACCACG
AGCAAAGGCTCGCGGAGCATGTTTAATAGCCTACGCCTCCGGTTTTATTATCCATATCTACTTATCAGCACTGTTGCCGCACGTAGTACATGTTCCGCCATTATCACGTACACCCTCCTTGATTGGTGGGCGATAAGACGTTACTTTATCATCGTGCTAATAATCAACTTCTCAAACGTGGTTATCGTCAACCGGGGAATAGGATTCAGTGGAGGGTCTGAAGCTATCGAACCCGTTTTGCTACCAGCATGCTACGCTGATGGTAACACAACTTAAGTCAGATACATCATGGACTAGGTAACAGACACGGGGGTGGCAAGG
GAAACAAACACGTTTCACATATTCTTCATTCAAGCTTTTGCCTTTCGTCCGGTTGCCTTCCACTGGTGACGAGCACAACACGTGGCCATCAAGCCAGGAAGGGGATTCAAGGCACAAACATCGCCGGATGAGCATCCAACTGATAATAGATTGTAGCTTGTTTTTCCAACTATCCTGAGCTTTCTAACTTACCTATAAATAGCGGCGTCTCCTGTGGTCCACTCTTTCAGGCCATCCCGATACGCGGAGCTACATGGTGCACCGGGCATTCTGCTTTCCGCCGACATCTGAAAGGCGAGCTACACACTCGGGGCCCTTGGA
TTTTTAGCCTAGGCTTGGCTTAATGCGTTAGATTGCAATTTCAATTGATCCGTATCTATTGGCAAGGAAGGAGATAGTTGTTGCCAAGATAGCACCACCCAGGCGATGCAGGAGTAGGGAAAATCGCGGAGGTCGATGTCGCGGAAGCCTAAGGAAGGCCATCGTAATCACTGACGACTACCGAGATCCGCGATTGTTCCGCAATTCGGTCCCAACAAAATTTGTATGGCGAAGGATTTGCCTCTATTTGCGGCGTGCTGCGAAAACACTATGTACATCTGACGAGGTCCGGGCAGGTCAATAACCGACATTCATCCATTC
TTTCCTAATGTAAGCTCTTGCCGTGAAGATGTTGCATTTGCTGTGCCTAGATAACAGGCACACCGATGCGCCAGAAATAGCAATCTCGCATCCTCGAGATCCGACCACTGTCGCTGTCACTCCTCAAACACGTAACGCATAGGGGATACGACTCATCGTTTAACAAGGCGTTTTTTGAAAAGACAGTGGCGGCGTTCCCGGCGAGTGTGATAGGCGCTATAGCTGTACTGCGGCACTAGGCATCAGACTACGCCTGTATCAATACAGGGATTGTCAAGGAGCGGGTGGTGCCAATGCCGTCCCTCTGGAGATAAGGGGGGA
GGTAACGCGCCGCTCTTGCTTTAAACTGGGCGGGGAAAGATATTCGCCGCAGGGTGAATTGCGCGGTAAAGCTAGCAGAGATCACTGGTGGTCGTTCTGACAGCTATTGCACTATTTGTTTGAGAGTGGGAAGCAGGTGCTTGACGCATCCACTTGCGAATTTCAGCTTGCTCGGTTAAGGTAAGTATAAAGCTTCGCTCAGCAACGAAACACGTAGATAATTAAGCAGACATTCATCACATGGCTCTGGTCGCGATCTACCGGAGCTAGAGTACTCATTATCGGCATCATGGCATTTGACTTAAGTTTGAGGCCAGTCAG
ATTCTGCGAGGAGAATCGAGATGAGCGTTTGGTGGGCTAGCGTCATTAAACATACAGTACATCCGCACAGAAAATCACGGCTTCATTAAAGGTCCAGACAACGGATATCTGTAGTGACGCTGCGGAGATGTCTTGACGGCGTGCTAGACCGCCGGGATGGCGTACAGTTACCTCTGCGTTTCAGAGACGACACTTTGCACAGCCAAGCGAAATGGAATCTTACATGGATCTCAGATGCCTTACTAAACCAGAGGCTACGTGTAAACAAGCCAGTAATTATTTAGCGACTGCTGACTAGTGTCCGTCAGTGGTTATCCGGAG
GCGGTCTCGTCGGAGCAAGTCCATAGACGTGCACAAGGGTAGTTTTTTCGGCTTAGGCACTGAGTACCGTTGTAGCTGAGAACCCTGAGAAAGGTACTGAGATTCGCTGGAGGCTGTCCATGGAGGAGCAACTGTGGATTATTGGCTCCCTTTTTACTTAGTAAGTTTGTGGGGAAACACCGGGTACATCGGGCGGCGAACTCAGCACGGGGTAATCGAGCTGTCAATCAGCGCGATCGGGTGCAGCCAGAGGAGAGCGGAGCGTCAGCCAACACACACTAACGATCTCTTATCACCGAAACATTCCTGGCTGATCCCCAA
TTCTGCGCGAATGTCGGCACACCTTCGAATAATGAGTGCAAGAGGAAGAATCACTCACAAACTGCACTTCCTAGGGCCGTAAACACTGTGGTCCTGCGGCTAAGCTGTTAAGTTGACGAGCCTAACGAAGATCAGTGGATATACGCTTATGCAAACTGATAGGGCTCTTCAAGAGACTATAGCCGGCCTATCACACGTAGTACAACAGAGCACTGGACTTTTGCTTAGACTGGCAGTCGTGCCTGCACTGGGCTCTTATGAAAGAGGCCTCTCTGGCCGGAGCAGCGTATTAGCAAGTGGTAAGTCCGACCTGCTGAATAC
GCTGTAGTCAAGCACGCGTCCCCTGCTTGAAAGCGCATTAAAAAACCATGAGGTAGATATGTAATTAGCAGGTTTTTGCAAAATGTCGAGCCCCCTGAGCATGGGTCGTCAATGCGCTACGTGCCTCCGACTAAAGCAATTACTACCTACGTAGTACATTGATACAGAAGTGGAGTGCCCTCATTAACAGGGTGATTCGTGCGGCTTCAGAGGCTAGAGCCCAGGCTGTAACTGGGTCCAACTGTAAAGTCATTGGTGGTCCTTCCGCTAGTCATCAGTTCTTGTAAGCGATTATACAACTACTCAGTTGCGAGCAAGCAA
GTACATATAGAGGTTCAACCCCTACTCTACGTAAGATGTGGTAATGGTCAGCTTGATAAAATTTACCCAGAGATTCCCATACTGAGGACGAGAATAGCCTCTCCCAGGCAGTTTCTACCTATCCAGCACTCAATCTACAATTCTGCCACCAATGTCCCGGATACGGAAAAGCCCTGAAGTTGTTGCGATGGAACAAGGGTGCTGTTGTCTCTGTTTGAGGGAAAACACGTAGTAAGAGATCCACACGGCCAATGTGTGTGTTACAGCCGCTGCACATAGACTTGCTTTACTATCGTGATGCCTTCATTCGCGAAATAAAGT
TTGGGCATTTTCAGCGCGCTACCTCAGTACTCCAGAAATCTCCATCCGTCACGAACACGTAGTACCACTGTTAAGTCTTGAGGCCGAGGTCACCTTGGTGGAGGCATCTTCCTTGCCCGACAGAAGCTGCAGCCGGTTCACGCGGCTGCCCAAGTTCTTAGTCTACGATTCAGAGACAACTTAGTCCTCCAGACAACGCATGATCTCATGGTCATGATACCTAGATGTTGTCTCTTTTTGAAAGTAGGGATATTTTACACACGGTTACTCTACCGTGGGGCCCCGACTATACGTTTCGTCAGTAACGGGGGTCAAGTCGCC
ACCGTCTATATTAAGGACCGAGCGGGTAAATCAGGGCAGGACTCCCTGTACAGTTGCCTGGGTTAAGTAAGTAACCCGTGGACCAATTTGCGTCAAGTATGCCAATACAATGCATCTCGCCTTAGCAAGTATGAATGCTCATGACGCTCCTAGTTGAGTTGCGCATATGTAGTAGGCCTTGCTGTTTCCTCGGTCCGTCACCAATCGATATTCGAATAGAGATGTGCACACACTGTGAGTCGTTACATAAAACTACTAGTACATTGTACTATCTGTAACCTAGTCGTCGAAGGATACCGAAGGTAAGGGTACGGAATTAGA
GTGTATCATCGATATTGTCTTTGGTCTGCTTTTTGTGTATTATTAGAACTAGTACCGGATGTTCAGAGCCTTCGTAGCCGTGGTAAGCGTTGACCCAGTGGACGTTCAGAAGAGTCATTACCAGAGACCGTTCTCCACATCGTCGCTGCCTAGGGTTATAGAGTCCGGATCACCCAAGATATCCATAGTGTTACGGAATGTCGCTTCATACAGCGGGTCTAAGGGCGTAGTACATCACGGACCCAGGGTACTCCACCCGCAAACTGTGATCTGACAGGCCCAAGGGCTTAATACCCTAGACCGTTGCAGCGGGGCTTTCTT
TTGGACCGTCCAGAGAAATGGCAAGACGAAACGTATAGGTTAAATCCGAAGCGGTCCCGATCCCAATCTGACAAGTCCCGCAAGCGGGCCATAAACCCGTCTCCAGATTGCAGGCTCTCGGTAGTCCTCGATAGTGTTGGGGGCTCTCGCAAACAACGCGCGCGACGATAGCAACAGCGCCAGGTAACCGCGAGAGACCAGCACCTCCACAAGAGCGGCAAGTGCCTGTAGGCGATCTAGGCGGACCTTTAAGCCTTGATTAAACCGTTAGTACATTTTTTCACCCACCGTTACTCGCCACTGTGTGCGCATCCAGCGTAA
"""
lines=input.splitlines()
k = int(lines[0].split(" ")[0])
t = int(lines[0].split(" ")[1])
N = int(lines[0].split(" ")[2])
dna=[]
for i in range(1,len(lines)):
  dna.append(lines[i])

BestMotifs = GibbsSampler(dna,k,t,N)
for i in range(1,20):
    Motifs = GibbsSampler(dna,k,t,N)
    if Score(Motifs) < Score(BestMotifs):
        BestMotifs = Motifs
for bm in BestMotifs:
  print(bm)